// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_base.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgProtoBufHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgProtoBufHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgMulti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgMulti_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgAuthTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgAuthTicket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_steammessages_5fbase_2eproto() {
  protobuf_AddDesc_steammessages_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "steammessages_base.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgProtoBufHeader_descriptor_ = file->message_type(0);
  static const int CMsgProtoBufHeader_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, routing_appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, job_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, job_id_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, target_job_name_),
  };
  CMsgProtoBufHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgProtoBufHeader_descriptor_,
      CMsgProtoBufHeader::default_instance_,
      CMsgProtoBufHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgProtoBufHeader));
  CMsgMulti_descriptor_ = file->message_type(1);
  static const int CMsgMulti_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, size_unzipped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, message_body_),
  };
  CMsgMulti_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgMulti_descriptor_,
      CMsgMulti::default_instance_,
      CMsgMulti_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgMulti));
  CMsgAuthTicket_descriptor_ = file->message_type(2);
  static const int CMsgAuthTicket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, estate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, eresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, steam_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, h_steam_pipe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_),
  };
  CMsgAuthTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgAuthTicket_descriptor_,
      CMsgAuthTicket::default_instance_,
      CMsgAuthTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgAuthTicket));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_steammessages_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgProtoBufHeader_descriptor_, &CMsgProtoBufHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgMulti_descriptor_, &CMsgMulti::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgAuthTicket_descriptor_, &CMsgAuthTicket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_steammessages_5fbase_2eproto() {
  delete CMsgProtoBufHeader::default_instance_;
  delete CMsgProtoBufHeader_reflection_;
  delete CMsgMulti::default_instance_;
  delete CMsgMulti_reflection_;
  delete CMsgAuthTicket::default_instance_;
  delete CMsgAuthTicket_reflection_;
}

void protobuf_AddDesc_steammessages_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030steammessages_base.proto\"\322\001\n\022CMsgProto"
    "BufHeader\022\027\n\017client_steam_id\030\001 \001(\006\022\031\n\021cl"
    "ient_session_id\030\002 \001(\005\022\025\n\rrouting_appid\030\003"
    " \001(\r\022+\n\rjob_id_source\030\n \001(\006:\02418446744073"
    "709551615\022+\n\rjob_id_target\030\013 \001(\006:\024184467"
    "44073709551615\022\027\n\017target_job_name\030\014 \001(\t\""
    "8\n\tCMsgMulti\022\025\n\rsize_unzipped\030\001 \001(\r\022\024\n\014m"
    "essage_body\030\002 \001(\014\"\221\001\n\016CMsgAuthTicket\022\016\n\006"
    "estate\030\001 \001(\r\022\022\n\007eresult\030\002 \001(\r:\0012\022\020\n\010stea"
    "m_id\030\003 \001(\006\022\017\n\007game_id\030\004 \001(\006\022\024\n\014h_steam_p"
    "ipe\030\005 \001(\r\022\022\n\nticket_crc\030\006 \001(\r\022\016\n\006ticket\030"
    "\007 \001(\014", 445);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_base.proto", &protobuf_RegisterTypes);
  CMsgProtoBufHeader::default_instance_ = new CMsgProtoBufHeader();
  CMsgMulti::default_instance_ = new CMsgMulti();
  CMsgAuthTicket::default_instance_ = new CMsgAuthTicket();
  CMsgProtoBufHeader::default_instance_->InitAsDefaultInstance();
  CMsgMulti::default_instance_->InitAsDefaultInstance();
  CMsgAuthTicket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_steammessages_5fbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_steammessages_5fbase_2eproto {
  StaticDescriptorInitializer_steammessages_5fbase_2eproto() {
    protobuf_AddDesc_steammessages_5fbase_2eproto();
  }
} static_descriptor_initializer_steammessages_5fbase_2eproto_;


// ===================================================================

const ::std::string CMsgProtoBufHeader::_default_target_job_name_;
#ifndef _MSC_VER
const int CMsgProtoBufHeader::kClientSteamIdFieldNumber;
const int CMsgProtoBufHeader::kClientSessionIdFieldNumber;
const int CMsgProtoBufHeader::kRoutingAppidFieldNumber;
const int CMsgProtoBufHeader::kJobIdSourceFieldNumber;
const int CMsgProtoBufHeader::kJobIdTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
#endif  // !_MSC_VER

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgProtoBufHeader::InitAsDefaultInstance() {
}

CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgProtoBufHeader::SharedCtor() {
  _cached_size_ = 0;
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  client_session_id_ = 0;
  routing_appid_ = 0u;
  job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  target_job_name_ = const_cast< ::std::string*>(&_default_target_job_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  if (target_job_name_ != &_default_target_job_name_) {
    delete target_job_name_;
  }
  if (this != default_instance_) {
  }
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoBufHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgProtoBufHeader_descriptor_;
}

const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();  return *default_instance_;
}

CMsgProtoBufHeader* CMsgProtoBufHeader::default_instance_ = NULL;

CMsgProtoBufHeader* CMsgProtoBufHeader::New() const {
  return new CMsgProtoBufHeader;
}

void CMsgProtoBufHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_steam_id_ = GOOGLE_ULONGLONG(0);
    client_session_id_ = 0;
    routing_appid_ = 0u;
    job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
    job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
    if (_has_bit(5)) {
      if (target_job_name_ != &_default_target_job_name_) {
        target_job_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 client_steam_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_client_session_id;
        break;
      }
      
      // optional int32 client_session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_session_id_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_routing_appid;
        break;
      }
      
      // optional uint32 routing_appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routing_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_appid_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_job_id_source;
        break;
      }
      
      // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_job_id_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_source_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_job_id_target;
        break;
      }
      
      // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_job_id_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &job_id_target_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_target_job_name;
        break;
      }
      
      // optional string target_job_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_job_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_job_name().data(), this->target_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 client_steam_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->client_steam_id(), output);
  }
  
  // optional int32 client_session_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_session_id(), output);
  }
  
  // optional uint32 routing_appid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routing_appid(), output);
  }
  
  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->job_id_source(), output);
  }
  
  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->job_id_target(), output);
  }
  
  // optional string target_job_name = 12;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->target_job_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgProtoBufHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 client_steam_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->client_steam_id(), target);
  }
  
  // optional int32 client_session_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_session_id(), target);
  }
  
  // optional uint32 routing_appid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->routing_appid(), target);
  }
  
  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->job_id_source(), target);
  }
  
  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->job_id_target(), target);
  }
  
  // optional string target_job_name = 12;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgProtoBufHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 client_steam_id = 1;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional int32 client_session_id = 2;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_session_id());
    }
    
    // optional uint32 routing_appid = 3;
    if (has_routing_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_appid());
    }
    
    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    if (has_job_id_source()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    if (has_job_id_target()) {
      total_size += 1 + 8;
    }
    
    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgProtoBufHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_client_steam_id(from.client_steam_id());
    }
    if (from._has_bit(1)) {
      set_client_session_id(from.client_session_id());
    }
    if (from._has_bit(2)) {
      set_routing_appid(from.routing_appid());
    }
    if (from._has_bit(3)) {
      set_job_id_source(from.job_id_source());
    }
    if (from._has_bit(4)) {
      set_job_id_target(from.job_id_target());
    }
    if (from._has_bit(5)) {
      set_target_job_name(from.target_job_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  
  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other != this) {
    std::swap(client_steam_id_, other->client_steam_id_);
    std::swap(client_session_id_, other->client_session_id_);
    std::swap(routing_appid_, other->routing_appid_);
    std::swap(job_id_source_, other->job_id_source_);
    std::swap(job_id_target_, other->job_id_target_);
    std::swap(target_job_name_, other->target_job_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgProtoBufHeader_descriptor_;
  metadata.reflection = CMsgProtoBufHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgMulti::_default_message_body_;
#ifndef _MSC_VER
const int CMsgMulti::kSizeUnzippedFieldNumber;
const int CMsgMulti::kMessageBodyFieldNumber;
#endif  // !_MSC_VER

CMsgMulti::CMsgMulti()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgMulti::InitAsDefaultInstance() {
}

CMsgMulti::CMsgMulti(const CMsgMulti& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgMulti::SharedCtor() {
  _cached_size_ = 0;
  size_unzipped_ = 0u;
  message_body_ = const_cast< ::std::string*>(&_default_message_body_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgMulti::~CMsgMulti() {
  SharedDtor();
}

void CMsgMulti::SharedDtor() {
  if (message_body_ != &_default_message_body_) {
    delete message_body_;
  }
  if (this != default_instance_) {
  }
}

void CMsgMulti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMulti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgMulti_descriptor_;
}

const CMsgMulti& CMsgMulti::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();  return *default_instance_;
}

CMsgMulti* CMsgMulti::default_instance_ = NULL;

CMsgMulti* CMsgMulti::New() const {
  return new CMsgMulti;
}

void CMsgMulti::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_unzipped_ = 0u;
    if (_has_bit(1)) {
      if (message_body_ != &_default_message_body_) {
        message_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgMulti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_unzipped = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_unzipped_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message_body;
        break;
      }
      
      // optional bytes message_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgMulti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 size_unzipped = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size_unzipped(), output);
  }
  
  // optional bytes message_body = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message_body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgMulti::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 size_unzipped = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size_unzipped(), target);
  }
  
  // optional bytes message_body = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message_body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgMulti::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 size_unzipped = 1;
    if (has_size_unzipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_unzipped());
    }
    
    // optional bytes message_body = 2;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMulti::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgMulti* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgMulti*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgMulti::MergeFrom(const CMsgMulti& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_size_unzipped(from.size_unzipped());
    }
    if (from._has_bit(1)) {
      set_message_body(from.message_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgMulti::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMulti::IsInitialized() const {
  
  return true;
}

void CMsgMulti::Swap(CMsgMulti* other) {
  if (other != this) {
    std::swap(size_unzipped_, other->size_unzipped_);
    std::swap(message_body_, other->message_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgMulti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgMulti_descriptor_;
  metadata.reflection = CMsgMulti_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CMsgAuthTicket::_default_ticket_;
#ifndef _MSC_VER
const int CMsgAuthTicket::kEstateFieldNumber;
const int CMsgAuthTicket::kEresultFieldNumber;
const int CMsgAuthTicket::kSteamIdFieldNumber;
const int CMsgAuthTicket::kGameIdFieldNumber;
const int CMsgAuthTicket::kHSteamPipeFieldNumber;
const int CMsgAuthTicket::kTicketCrcFieldNumber;
const int CMsgAuthTicket::kTicketFieldNumber;
#endif  // !_MSC_VER

CMsgAuthTicket::CMsgAuthTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgAuthTicket::InitAsDefaultInstance() {
}

CMsgAuthTicket::CMsgAuthTicket(const CMsgAuthTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  estate_ = 0u;
  eresult_ = 2u;
  steam_id_ = GOOGLE_ULONGLONG(0);
  game_id_ = GOOGLE_ULONGLONG(0);
  h_steam_pipe_ = 0u;
  ticket_crc_ = 0u;
  ticket_ = const_cast< ::std::string*>(&_default_ticket_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgAuthTicket::~CMsgAuthTicket() {
  SharedDtor();
}

void CMsgAuthTicket::SharedDtor() {
  if (ticket_ != &_default_ticket_) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void CMsgAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAuthTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgAuthTicket_descriptor_;
}

const CMsgAuthTicket& CMsgAuthTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_steammessages_5fbase_2eproto();  return *default_instance_;
}

CMsgAuthTicket* CMsgAuthTicket::default_instance_ = NULL;

CMsgAuthTicket* CMsgAuthTicket::New() const {
  return new CMsgAuthTicket;
}

void CMsgAuthTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    estate_ = 0u;
    eresult_ = 2u;
    steam_id_ = GOOGLE_ULONGLONG(0);
    game_id_ = GOOGLE_ULONGLONG(0);
    h_steam_pipe_ = 0u;
    ticket_crc_ = 0u;
    if (_has_bit(6)) {
      if (ticket_ != &_default_ticket_) {
        ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 estate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eresult;
        break;
      }
      
      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eresult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_steam_id;
        break;
      }
      
      // optional fixed64 steam_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steam_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_game_id;
        break;
      }
      
      // optional fixed64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_h_steam_pipe;
        break;
      }
      
      // optional uint32 h_steam_pipe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h_steam_pipe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_steam_pipe_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ticket_crc;
        break;
      }
      
      // optional uint32 ticket_crc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ticket;
        break;
      }
      
      // optional bytes ticket = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 estate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->estate(), output);
  }
  
  // optional uint32 eresult = 2 [default = 2];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }
  
  // optional fixed64 steam_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }
  
  // optional fixed64 game_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->game_id(), output);
  }
  
  // optional uint32 h_steam_pipe = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->h_steam_pipe(), output);
  }
  
  // optional uint32 ticket_crc = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }
  
  // optional bytes ticket = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->ticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgAuthTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 estate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->estate(), target);
  }
  
  // optional uint32 eresult = 2 [default = 2];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }
  
  // optional fixed64 steam_id = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }
  
  // optional fixed64 game_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->game_id(), target);
  }
  
  // optional uint32 h_steam_pipe = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->h_steam_pipe(), target);
  }
  
  // optional uint32 ticket_crc = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }
  
  // optional bytes ticket = 7;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->ticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgAuthTicket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 estate = 1;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }
    
    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }
    
    // optional fixed64 steam_id = 3;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 h_steam_pipe = 5;
    if (has_h_steam_pipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_steam_pipe());
    }
    
    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }
    
    // optional bytes ticket = 7;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgAuthTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgAuthTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgAuthTicket::MergeFrom(const CMsgAuthTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_estate(from.estate());
    }
    if (from._has_bit(1)) {
      set_eresult(from.eresult());
    }
    if (from._has_bit(2)) {
      set_steam_id(from.steam_id());
    }
    if (from._has_bit(3)) {
      set_game_id(from.game_id());
    }
    if (from._has_bit(4)) {
      set_h_steam_pipe(from.h_steam_pipe());
    }
    if (from._has_bit(5)) {
      set_ticket_crc(from.ticket_crc());
    }
    if (from._has_bit(6)) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthTicket::IsInitialized() const {
  
  return true;
}

void CMsgAuthTicket::Swap(CMsgAuthTicket* other) {
  if (other != this) {
    std::swap(estate_, other->estate_);
    std::swap(eresult_, other->eresult_);
    std::swap(steam_id_, other->steam_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(h_steam_pipe_, other->h_steam_pipe_);
    std::swap(ticket_crc_, other->ticket_crc_);
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgAuthTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgAuthTicket_descriptor_;
  metadata.reflection = CMsgAuthTicket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
