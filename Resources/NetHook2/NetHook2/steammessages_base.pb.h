// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#ifndef PROTOBUF_steammessages_5fbase_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_steammessages_5fbase_2eproto();
void protobuf_AssignDesc_steammessages_5fbase_2eproto();
void protobuf_ShutdownFile_steammessages_5fbase_2eproto();

class CMsgProtoBufHeader;
class CMsgMulti;
class CMsgAuthTicket;

// ===================================================================

class CMsgProtoBufHeader : public ::google::protobuf::Message {
 public:
  CMsgProtoBufHeader();
  virtual ~CMsgProtoBufHeader();
  
  CMsgProtoBufHeader(const CMsgProtoBufHeader& from);
  
  inline CMsgProtoBufHeader& operator=(const CMsgProtoBufHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgProtoBufHeader& default_instance();
  
  void Swap(CMsgProtoBufHeader* other);
  
  // implements Message ----------------------------------------------
  
  CMsgProtoBufHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgProtoBufHeader& from);
  void MergeFrom(const CMsgProtoBufHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 client_steam_id = 1;
  inline bool has_client_steam_id() const;
  inline void clear_client_steam_id();
  static const int kClientSteamIdFieldNumber = 1;
  inline ::google::protobuf::uint64 client_steam_id() const;
  inline void set_client_steam_id(::google::protobuf::uint64 value);
  
  // optional int32 client_session_id = 2;
  inline bool has_client_session_id() const;
  inline void clear_client_session_id();
  static const int kClientSessionIdFieldNumber = 2;
  inline ::google::protobuf::int32 client_session_id() const;
  inline void set_client_session_id(::google::protobuf::int32 value);
  
  // optional uint32 routing_appid = 3;
  inline bool has_routing_appid() const;
  inline void clear_routing_appid();
  static const int kRoutingAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 routing_appid() const;
  inline void set_routing_appid(::google::protobuf::uint32 value);
  
  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  inline bool has_job_id_source() const;
  inline void clear_job_id_source();
  static const int kJobIdSourceFieldNumber = 10;
  inline ::google::protobuf::uint64 job_id_source() const;
  inline void set_job_id_source(::google::protobuf::uint64 value);
  
  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  inline bool has_job_id_target() const;
  inline void clear_job_id_target();
  static const int kJobIdTargetFieldNumber = 11;
  inline ::google::protobuf::uint64 job_id_target() const;
  inline void set_job_id_target(::google::protobuf::uint64 value);
  
  // optional string target_job_name = 12;
  inline bool has_target_job_name() const;
  inline void clear_target_job_name();
  static const int kTargetJobNameFieldNumber = 12;
  inline const ::std::string& target_job_name() const;
  inline void set_target_job_name(const ::std::string& value);
  inline void set_target_job_name(const char* value);
  inline void set_target_job_name(const char* value, size_t size);
  inline ::std::string* mutable_target_job_name();
  
  // @@protoc_insertion_point(class_scope:CMsgProtoBufHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 client_steam_id_;
  ::google::protobuf::int32 client_session_id_;
  ::google::protobuf::uint32 routing_appid_;
  ::google::protobuf::uint64 job_id_source_;
  ::google::protobuf::uint64 job_id_target_;
  ::std::string* target_job_name_;
  static const ::std::string _default_target_job_name_;
  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMsgProtoBufHeader* default_instance_;
};
// -------------------------------------------------------------------

class CMsgMulti : public ::google::protobuf::Message {
 public:
  CMsgMulti();
  virtual ~CMsgMulti();
  
  CMsgMulti(const CMsgMulti& from);
  
  inline CMsgMulti& operator=(const CMsgMulti& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgMulti& default_instance();
  
  void Swap(CMsgMulti* other);
  
  // implements Message ----------------------------------------------
  
  CMsgMulti* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgMulti& from);
  void MergeFrom(const CMsgMulti& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 size_unzipped = 1;
  inline bool has_size_unzipped() const;
  inline void clear_size_unzipped();
  static const int kSizeUnzippedFieldNumber = 1;
  inline ::google::protobuf::uint32 size_unzipped() const;
  inline void set_size_unzipped(::google::protobuf::uint32 value);
  
  // optional bytes message_body = 2;
  inline bool has_message_body() const;
  inline void clear_message_body();
  static const int kMessageBodyFieldNumber = 2;
  inline const ::std::string& message_body() const;
  inline void set_message_body(const ::std::string& value);
  inline void set_message_body(const char* value);
  inline void set_message_body(const void* value, size_t size);
  inline ::std::string* mutable_message_body();
  
  // @@protoc_insertion_point(class_scope:CMsgMulti)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 size_unzipped_;
  ::std::string* message_body_;
  static const ::std::string _default_message_body_;
  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMsgMulti* default_instance_;
};
// -------------------------------------------------------------------

class CMsgAuthTicket : public ::google::protobuf::Message {
 public:
  CMsgAuthTicket();
  virtual ~CMsgAuthTicket();
  
  CMsgAuthTicket(const CMsgAuthTicket& from);
  
  inline CMsgAuthTicket& operator=(const CMsgAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgAuthTicket& default_instance();
  
  void Swap(CMsgAuthTicket* other);
  
  // implements Message ----------------------------------------------
  
  CMsgAuthTicket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CMsgAuthTicket& from);
  void MergeFrom(const CMsgAuthTicket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 estate = 1;
  inline bool has_estate() const;
  inline void clear_estate();
  static const int kEstateFieldNumber = 1;
  inline ::google::protobuf::uint32 estate() const;
  inline void set_estate(::google::protobuf::uint32 value);
  
  // optional uint32 eresult = 2 [default = 2];
  inline bool has_eresult() const;
  inline void clear_eresult();
  static const int kEresultFieldNumber = 2;
  inline ::google::protobuf::uint32 eresult() const;
  inline void set_eresult(::google::protobuf::uint32 value);
  
  // optional fixed64 steam_id = 3;
  inline bool has_steam_id() const;
  inline void clear_steam_id();
  static const int kSteamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 steam_id() const;
  inline void set_steam_id(::google::protobuf::uint64 value);
  
  // optional fixed64 game_id = 4;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);
  
  // optional uint32 h_steam_pipe = 5;
  inline bool has_h_steam_pipe() const;
  inline void clear_h_steam_pipe();
  static const int kHSteamPipeFieldNumber = 5;
  inline ::google::protobuf::uint32 h_steam_pipe() const;
  inline void set_h_steam_pipe(::google::protobuf::uint32 value);
  
  // optional uint32 ticket_crc = 6;
  inline bool has_ticket_crc() const;
  inline void clear_ticket_crc();
  static const int kTicketCrcFieldNumber = 6;
  inline ::google::protobuf::uint32 ticket_crc() const;
  inline void set_ticket_crc(::google::protobuf::uint32 value);
  
  // optional bytes ticket = 7;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 7;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  
  // @@protoc_insertion_point(class_scope:CMsgAuthTicket)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 estate_;
  ::google::protobuf::uint32 eresult_;
  ::google::protobuf::uint64 steam_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::uint32 h_steam_pipe_;
  ::google::protobuf::uint32 ticket_crc_;
  ::std::string* ticket_;
  static const ::std::string _default_ticket_;
  friend void  protobuf_AddDesc_steammessages_5fbase_2eproto();
  friend void protobuf_AssignDesc_steammessages_5fbase_2eproto();
  friend void protobuf_ShutdownFile_steammessages_5fbase_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CMsgAuthTicket* default_instance_;
};
// ===================================================================


// ===================================================================

// CMsgProtoBufHeader

// optional fixed64 client_steam_id = 1;
inline bool CMsgProtoBufHeader::has_client_steam_id() const {
  return _has_bit(0);
}
inline void CMsgProtoBufHeader::clear_client_steam_id() {
  client_steam_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::client_steam_id() const {
  return client_steam_id_;
}
inline void CMsgProtoBufHeader::set_client_steam_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  client_steam_id_ = value;
}

// optional int32 client_session_id = 2;
inline bool CMsgProtoBufHeader::has_client_session_id() const {
  return _has_bit(1);
}
inline void CMsgProtoBufHeader::clear_client_session_id() {
  client_session_id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CMsgProtoBufHeader::client_session_id() const {
  return client_session_id_;
}
inline void CMsgProtoBufHeader::set_client_session_id(::google::protobuf::int32 value) {
  _set_bit(1);
  client_session_id_ = value;
}

// optional uint32 routing_appid = 3;
inline bool CMsgProtoBufHeader::has_routing_appid() const {
  return _has_bit(2);
}
inline void CMsgProtoBufHeader::clear_routing_appid() {
  routing_appid_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 CMsgProtoBufHeader::routing_appid() const {
  return routing_appid_;
}
inline void CMsgProtoBufHeader::set_routing_appid(::google::protobuf::uint32 value) {
  _set_bit(2);
  routing_appid_ = value;
}

// optional fixed64 job_id_source = 10 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_job_id_source() const {
  return _has_bit(3);
}
inline void CMsgProtoBufHeader::clear_job_id_source() {
  job_id_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::job_id_source() const {
  return job_id_source_;
}
inline void CMsgProtoBufHeader::set_job_id_source(::google::protobuf::uint64 value) {
  _set_bit(3);
  job_id_source_ = value;
}

// optional fixed64 job_id_target = 11 [default = 18446744073709551615];
inline bool CMsgProtoBufHeader::has_job_id_target() const {
  return _has_bit(4);
}
inline void CMsgProtoBufHeader::clear_job_id_target() {
  job_id_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  _clear_bit(4);
}
inline ::google::protobuf::uint64 CMsgProtoBufHeader::job_id_target() const {
  return job_id_target_;
}
inline void CMsgProtoBufHeader::set_job_id_target(::google::protobuf::uint64 value) {
  _set_bit(4);
  job_id_target_ = value;
}

// optional string target_job_name = 12;
inline bool CMsgProtoBufHeader::has_target_job_name() const {
  return _has_bit(5);
}
inline void CMsgProtoBufHeader::clear_target_job_name() {
  if (target_job_name_ != &_default_target_job_name_) {
    target_job_name_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CMsgProtoBufHeader::target_job_name() const {
  return *target_job_name_;
}
inline void CMsgProtoBufHeader::set_target_job_name(const ::std::string& value) {
  _set_bit(5);
  if (target_job_name_ == &_default_target_job_name_) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  _set_bit(5);
  if (target_job_name_ == &_default_target_job_name_) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(value);
}
inline void CMsgProtoBufHeader::set_target_job_name(const char* value, size_t size) {
  _set_bit(5);
  if (target_job_name_ == &_default_target_job_name_) {
    target_job_name_ = new ::std::string;
  }
  target_job_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  _set_bit(5);
  if (target_job_name_ == &_default_target_job_name_) {
    target_job_name_ = new ::std::string;
  }
  return target_job_name_;
}

// -------------------------------------------------------------------

// CMsgMulti

// optional uint32 size_unzipped = 1;
inline bool CMsgMulti::has_size_unzipped() const {
  return _has_bit(0);
}
inline void CMsgMulti::clear_size_unzipped() {
  size_unzipped_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgMulti::size_unzipped() const {
  return size_unzipped_;
}
inline void CMsgMulti::set_size_unzipped(::google::protobuf::uint32 value) {
  _set_bit(0);
  size_unzipped_ = value;
}

// optional bytes message_body = 2;
inline bool CMsgMulti::has_message_body() const {
  return _has_bit(1);
}
inline void CMsgMulti::clear_message_body() {
  if (message_body_ != &_default_message_body_) {
    message_body_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CMsgMulti::message_body() const {
  return *message_body_;
}
inline void CMsgMulti::set_message_body(const ::std::string& value) {
  _set_bit(1);
  if (message_body_ == &_default_message_body_) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgMulti::set_message_body(const char* value) {
  _set_bit(1);
  if (message_body_ == &_default_message_body_) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(value);
}
inline void CMsgMulti::set_message_body(const void* value, size_t size) {
  _set_bit(1);
  if (message_body_ == &_default_message_body_) {
    message_body_ = new ::std::string;
  }
  message_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgMulti::mutable_message_body() {
  _set_bit(1);
  if (message_body_ == &_default_message_body_) {
    message_body_ = new ::std::string;
  }
  return message_body_;
}

// -------------------------------------------------------------------

// CMsgAuthTicket

// optional uint32 estate = 1;
inline bool CMsgAuthTicket::has_estate() const {
  return _has_bit(0);
}
inline void CMsgAuthTicket::clear_estate() {
  estate_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 CMsgAuthTicket::estate() const {
  return estate_;
}
inline void CMsgAuthTicket::set_estate(::google::protobuf::uint32 value) {
  _set_bit(0);
  estate_ = value;
}

// optional uint32 eresult = 2 [default = 2];
inline bool CMsgAuthTicket::has_eresult() const {
  return _has_bit(1);
}
inline void CMsgAuthTicket::clear_eresult() {
  eresult_ = 2u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CMsgAuthTicket::eresult() const {
  return eresult_;
}
inline void CMsgAuthTicket::set_eresult(::google::protobuf::uint32 value) {
  _set_bit(1);
  eresult_ = value;
}

// optional fixed64 steam_id = 3;
inline bool CMsgAuthTicket::has_steam_id() const {
  return _has_bit(2);
}
inline void CMsgAuthTicket::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 CMsgAuthTicket::steam_id() const {
  return steam_id_;
}
inline void CMsgAuthTicket::set_steam_id(::google::protobuf::uint64 value) {
  _set_bit(2);
  steam_id_ = value;
}

// optional fixed64 game_id = 4;
inline bool CMsgAuthTicket::has_game_id() const {
  return _has_bit(3);
}
inline void CMsgAuthTicket::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 CMsgAuthTicket::game_id() const {
  return game_id_;
}
inline void CMsgAuthTicket::set_game_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  game_id_ = value;
}

// optional uint32 h_steam_pipe = 5;
inline bool CMsgAuthTicket::has_h_steam_pipe() const {
  return _has_bit(4);
}
inline void CMsgAuthTicket::clear_h_steam_pipe() {
  h_steam_pipe_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 CMsgAuthTicket::h_steam_pipe() const {
  return h_steam_pipe_;
}
inline void CMsgAuthTicket::set_h_steam_pipe(::google::protobuf::uint32 value) {
  _set_bit(4);
  h_steam_pipe_ = value;
}

// optional uint32 ticket_crc = 6;
inline bool CMsgAuthTicket::has_ticket_crc() const {
  return _has_bit(5);
}
inline void CMsgAuthTicket::clear_ticket_crc() {
  ticket_crc_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 CMsgAuthTicket::ticket_crc() const {
  return ticket_crc_;
}
inline void CMsgAuthTicket::set_ticket_crc(::google::protobuf::uint32 value) {
  _set_bit(5);
  ticket_crc_ = value;
}

// optional bytes ticket = 7;
inline bool CMsgAuthTicket::has_ticket() const {
  return _has_bit(6);
}
inline void CMsgAuthTicket::clear_ticket() {
  if (ticket_ != &_default_ticket_) {
    ticket_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& CMsgAuthTicket::ticket() const {
  return *ticket_;
}
inline void CMsgAuthTicket::set_ticket(const ::std::string& value) {
  _set_bit(6);
  if (ticket_ == &_default_ticket_) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgAuthTicket::set_ticket(const char* value) {
  _set_bit(6);
  if (ticket_ == &_default_ticket_) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void CMsgAuthTicket::set_ticket(const void* value, size_t size) {
  _set_bit(6);
  if (ticket_ == &_default_ticket_) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMsgAuthTicket::mutable_ticket() {
  _set_bit(6);
  if (ticket_ == &_default_ticket_) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fbase_2eproto__INCLUDED
